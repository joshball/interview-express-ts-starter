import { NextFunction, Request, Response, Router } from 'express';
import { log } from '../services/LogService';
import { lookupUrl, createUrl } from '../services/TinyUrlService';

export const TinyUrlController: Router = Router();

/**
 * Create a tiny url from original url
 *      POST http://SERVICE_HOST/
 * With body:
 *      {
 *          url: string // url to shorten
 *          customUrl: string | undefined // optional custom short url
 *          expiresOn: number | undefined // optional expiration (default one year)
 *      }
 * TO DO: this should be authenticated with userId to throttle for abuse
 * SUCCESS response will be (assuming origUrl was https://www.singularity6.com):
 *      {
 *          origUrl: string     // original URL
 *          shortUrl: string    // shortened URL
 *          expiresOn: number   // expiration (epoch) (default one year)
 *      }
 * ERROR responses could be:
 *  - if invalid parameters (invalid url, customUrl, expiresOn (less than now)) ....
 *  - if un-uauthenticated user
 *  - if internal error ...
 */

TinyUrlController.post('/', async (req: Request, res: Response, next: NextFunction) => {
    try {
        log('TinyUrl POST (params|query|body)', req.params, req.query, req.body);
        const origUrl = req.body.url;
        const customUrl = req.body.customUrl;
        const expiresOn = req.body.expiresOn;

        const userId = '1'; // for now
        const tinyUrlResp = createUrl(origUrl, userId, expiresOn, customUrl);
        // dump('tinyUrlResp:', tinyUrlResp);
        res.status(201).json({ data: tinyUrlResp });
    } catch (err) {
        res.json({ error: err });
        next(err);
    }
});

/**
 * Lookup a tiny url and return 301 moved if found with the original url
 *      http://SERVICE_HOST/tiny_url
 *  where tiny_url is the url that was generated by our system
 * SUCCESS response will be (assuming origUrl was https://www.singularity6.com):
 *      301 Moved -> https://www.singularity6.com
 * ERROR responses could be:
 *  - if tiny_url does not exist ...
 *  - if tiny_url has expired ...
 *  - if internal error ...
 */
TinyUrlController.get('/:shortUrl', async (req: Request, res: Response, next: NextFunction) => {
    try {
        log('TinyUrl GET (params|query|body)', req.params, req.query, req.body);
        const shortUrl = req.params.shortUrl;
        const now = Date.now();
        const urlLookupResp = lookupUrl(shortUrl);
        if (!urlLookupResp || urlLookupResp.expiresOn < now) {
            console.log('Returning 404');
            res.status(404).send();
        } else {
        // dump('urlLookupResp:', urlLookupResp);
            res.redirect(301, urlLookupResp.origUrl);
        }
    } catch (err) {
        res.json({ error: err });
        next(err);
    }
});
